apiVersion: apps/v1
kind: Deployment
metadata:
  name: assistants
spec:
  replicas: 1
  selector:
    matchLabels:
      app: assistants
  template:
    metadata:
      labels:
        app: assistants
    spec:
      containers:
      - name: postgres
        image: postgres
        env:
        - name: POSTGRES_PASSWORD
          value: secret
        - name: POSTGRES_DB
          value: mydatabase
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: migration-script
          mountPath: /docker-entrypoint-initdb.d/migrations.sql
          subPath: migrations.sql

      - name: redis
        image: redis
        ports:
        - containerPort: 6379

      - name: minio
        image: minio/minio
        env:
        - name: MINIO_ROOT_USER
          value: minioadmin
        - name: MINIO_ROOT_PASSWORD
          value: minioadmin
        ports:
        - containerPort: 9000
        - containerPort: 9001
        args:
        - server
        - /data
        - --console-address
        - ":9001"

      - name: rust-api
        image: ghcr.io/stellar-amenities/assistants/assistants:0.0.3
        imagePullPolicy: Always # for dev
        env:
        - name: DATABASE_URL
          value: postgres://postgres:secret@localhost:5432/mydatabase
        - name: REDIS_URL
          value: redis://localhost/
        - name: S3_ENDPOINT
          value: http://localhost:9000
        - name: S3_ACCESS_KEY
          value: minioadmin
        - name: S3_SECRET_KEY
          value: minioadmin
        - name: S3_BUCKET_NAME
          value: mybucket
        - name: PORT
          value: "3000"
        - name: MODEL_API_KEY
          valueFrom:
            secretKeyRef:
              name: model-api-key
              key: MODEL_API_KEY
        - name: MODEL_URL
          valueFrom:
            secretKeyRef:
              name: model-url
              key: MODEL_URL
        # readinessProbe:
        #   exec:
        #     command:
        #     - /app/readiness-probe.sh
        #     - http://localhost:3000
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
      volumes:
      - name: migration-script
        configMap:
          name: migration-script
---
apiVersion: v1
kind: Service
metadata:
  name: rust-api-service
spec:
  selector:
    app: assistants
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer


# kubectl create namespace assistants 
# kubectl delete secret model-url -n assistants
# kubectl create secret generic model-url --from-literal=MODEL_URL=$(grep MODEL_URL .env | head -n1 | cut -d '=' -f2 | tr -d '"') -n assistants
# kubectl delete secret model-api-key -n assistants
# kubectl create secret generic model-api-key --from-literal=MODEL_API_KEY=$(grep MODEL_API_KEY .env | head -n1 | cut -d '=' -f2) -n assistants
# kubectl create configmap migration-script --from-file=assistants-core/src/migrations.sql -n assistants
# kubectl delete configmap migration-script -n assistants
# kubectl apply -f ee/k8s/one-liner-everything.yaml -n assistants 
# kubectl replace -f ee/k8s/one-liner-everything.yaml -n assistants --force
# kubectl delete -f ee/k8s/one-liner-everything.yaml -n assistants

# kubectl get pods -n assistants -l app=assistants
# POD_NAME=$(kubectl get pods -n assistants -l app=assistants -o jsonpath="{.items[0].metadata.name}")
# kubectl describe pod/$POD_NAME -n assistants
# kubectl logs $POD_NAME -n assistants -c rust-api
# kubectl logs $POD_NAME -c postgres -n assistants
# URL=$(kubectl get svc rust-api-service -n assistants -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
# curl -X POST http://$URL/threads -H "Content-Type: application/json"

# ./ee/k8s/readiness-probe.sh $URL

# TODO: add vLLM kubernetes deployment to gpu or mlc-llm

# curl -s -X POST $URL/assistants -H "Content-Type: application/json" -d '{"instructions": "You are a personal math tutor. Write and run code to answer math questions.","name": "Math Tutor","tools": [{"type": "retrieval"}],"model": "claude-2.1"}'
# curl -s -X POST https://barely-honest-yak.ngrok-free.app/assistants -H "Content-Type: application/json" -d '{"instructions": "You are a personal math tutor. Write and run code to answer math questions.","name": "Math Tutor","tools": [{"type": "retrieval"}],"model": "claude-2.1"}'

